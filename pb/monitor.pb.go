// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monitor.proto

package monitor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//define node status
type NodeStatus int32

const (
	NodeStatus_NODE_DOWN     NodeStatus = 0
	NodeStatus_NODE_UP       NodeStatus = 1
	NodeStatus_NODE_MAINTAIN NodeStatus = 2
)

var NodeStatus_name = map[int32]string{
	0: "NODE_DOWN",
	1: "NODE_UP",
	2: "NODE_MAINTAIN",
}

var NodeStatus_value = map[string]int32{
	"NODE_DOWN":     0,
	"NODE_UP":       1,
	"NODE_MAINTAIN": 2,
}

func (x NodeStatus) String() string {
	return proto.EnumName(NodeStatus_name, int32(x))
}

func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{0}
}

//message for node info
type NodeInfo struct {
	Kind                 string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{0}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *NodeInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *NodeInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *NodeInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

//message for nodes query
type NodesQuery struct {
	Kind                 string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodesQuery) Reset()         { *m = NodesQuery{} }
func (m *NodesQuery) String() string { return proto.CompactTextString(m) }
func (*NodesQuery) ProtoMessage()    {}
func (*NodesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{1}
}

func (m *NodesQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodesQuery.Unmarshal(m, b)
}
func (m *NodesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodesQuery.Marshal(b, m, deterministic)
}
func (m *NodesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesQuery.Merge(m, src)
}
func (m *NodesQuery) XXX_Size() int {
	return xxx_messageInfo_NodesQuery.Size(m)
}
func (m *NodesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_NodesQuery proto.InternalMessageInfo

func (m *NodesQuery) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

//message for nodes result
type NodesResult struct {
	NodeList             []*NodeInfo `protobuf:"bytes,1,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NodesResult) Reset()         { *m = NodesResult{} }
func (m *NodesResult) String() string { return proto.CompactTextString(m) }
func (*NodesResult) ProtoMessage()    {}
func (*NodesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_44174b7b2a306b71, []int{2}
}

func (m *NodesResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodesResult.Unmarshal(m, b)
}
func (m *NodesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodesResult.Marshal(b, m, deterministic)
}
func (m *NodesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesResult.Merge(m, src)
}
func (m *NodesResult) XXX_Size() int {
	return xxx_messageInfo_NodesResult.Size(m)
}
func (m *NodesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesResult.DiscardUnknown(m)
}

var xxx_messageInfo_NodesResult proto.InternalMessageInfo

func (m *NodesResult) GetNodeList() []*NodeInfo {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func init() {
	proto.RegisterEnum("monitor.NodeStatus", NodeStatus_name, NodeStatus_value)
	proto.RegisterType((*NodeInfo)(nil), "monitor.NodeInfo")
	proto.RegisterType((*NodesQuery)(nil), "monitor.NodesQuery")
	proto.RegisterType((*NodesResult)(nil), "monitor.NodesResult")
}

func init() { proto.RegisterFile("monitor.proto", fileDescriptor_44174b7b2a306b71) }

var fileDescriptor_44174b7b2a306b71 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4b, 0xfb, 0x40,
	0x14, 0xc4, 0xbf, 0xdb, 0xf6, 0xdb, 0x1f, 0x2f, 0x44, 0xd2, 0xa7, 0x48, 0xe8, 0x29, 0xe4, 0x14,
	0x04, 0x8b, 0x54, 0xd0, 0x83, 0x5e, 0x0a, 0xf5, 0x10, 0xb0, 0x5b, 0x4d, 0x15, 0x6f, 0x8a, 0x9a,
	0x2d, 0x2e, 0x6a, 0xb6, 0xec, 0x6e, 0x84, 0x1e, 0xfd, 0xcf, 0x65, 0xdf, 0xb6, 0x42, 0xa9, 0xb7,
	0x37, 0x1f, 0x86, 0x99, 0x1d, 0x16, 0xc2, 0x4f, 0x55, 0x49, 0xab, 0xf4, 0x70, 0xa9, 0x95, 0x55,
	0xd8, 0x59, 0xcb, 0xf4, 0x11, 0xba, 0x5c, 0x95, 0x22, 0xaf, 0x16, 0x0a, 0x11, 0x5a, 0xef, 0xb2,
	0x2a, 0x63, 0x96, 0xb0, 0xac, 0x57, 0xd0, 0xed, 0xd8, 0x9b, 0x32, 0x36, 0x6e, 0x78, 0xe6, 0x6e,
	0xc7, 0x96, 0x4a, 0xdb, 0xb8, 0x99, 0xb0, 0xec, 0x7f, 0x41, 0x37, 0x1e, 0x42, 0xdb, 0xd8, 0x67,
	0x5b, 0x9b, 0xb8, 0x45, 0x74, 0xad, 0xd2, 0x04, 0xc0, 0xe5, 0x9b, 0xdb, 0x5a, 0xe8, 0xd5, 0x5f,
	0x0d, 0xe9, 0x25, 0x04, 0xe4, 0x28, 0x84, 0xa9, 0x3f, 0x2c, 0x1e, 0x43, 0xb7, 0x52, 0xa5, 0xb8,
	0x96, 0xc6, 0xc6, 0x2c, 0x69, 0x66, 0xc1, 0xa8, 0x3f, 0xdc, 0xbc, 0x7d, 0xf3, 0xd2, 0xe2, 0xd7,
	0x72, 0x74, 0xe1, 0xf3, 0xe7, 0xd4, 0x86, 0x21, 0xf4, 0xf8, 0x6c, 0x72, 0xf5, 0x34, 0x99, 0x3d,
	0xf0, 0xe8, 0x1f, 0x06, 0xd0, 0x21, 0x79, 0x7f, 0x13, 0x31, 0xec, 0x43, 0x48, 0x62, 0x3a, 0xce,
	0xf9, 0xdd, 0x38, 0xe7, 0x51, 0x63, 0xf4, 0xcd, 0x60, 0x6f, 0xea, 0xb3, 0xe7, 0x42, 0x7f, 0xc9,
	0x57, 0x81, 0x67, 0x2e, 0xcf, 0xca, 0xc5, 0xca, 0xa5, 0xe2, 0x6e, 0xf5, 0x60, 0x17, 0x65, 0xec,
	0x84, 0xe1, 0x39, 0x00, 0x4d, 0xa4, 0x29, 0xb8, 0xbf, 0x65, 0xf2, 0xe3, 0x07, 0x07, 0xdb, 0xd0,
	0xef, 0x7d, 0x69, 0xd3, 0x87, 0x9c, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x91, 0xa8, 0x95,
	0xa1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorServiceClient interface {
	//notify to or from monitor
	NotifyNode(ctx context.Context, opts ...grpc.CallOption) (MonitorService_NotifyNodeClient, error)
	//query batch nodes
	QueryNodes(ctx context.Context, in *NodesQuery, opts ...grpc.CallOption) (*NodesResult, error)
}

type monitorServiceClient struct {
	cc *grpc.ClientConn
}

func NewMonitorServiceClient(cc *grpc.ClientConn) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) NotifyNode(ctx context.Context, opts ...grpc.CallOption) (MonitorService_NotifyNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitorService_serviceDesc.Streams[0], "/monitor.MonitorService/NotifyNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorServiceNotifyNodeClient{stream}
	return x, nil
}

type MonitorService_NotifyNodeClient interface {
	Send(*NodeInfo) error
	Recv() (*NodeInfo, error)
	grpc.ClientStream
}

type monitorServiceNotifyNodeClient struct {
	grpc.ClientStream
}

func (x *monitorServiceNotifyNodeClient) Send(m *NodeInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorServiceNotifyNodeClient) Recv() (*NodeInfo, error) {
	m := new(NodeInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorServiceClient) QueryNodes(ctx context.Context, in *NodesQuery, opts ...grpc.CallOption) (*NodesResult, error) {
	out := new(NodesResult)
	err := c.cc.Invoke(ctx, "/monitor.MonitorService/QueryNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServiceServer is the server API for MonitorService service.
type MonitorServiceServer interface {
	//notify to or from monitor
	NotifyNode(MonitorService_NotifyNodeServer) error
	//query batch nodes
	QueryNodes(context.Context, *NodesQuery) (*NodesResult, error)
}

// UnimplementedMonitorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (*UnimplementedMonitorServiceServer) NotifyNode(srv MonitorService_NotifyNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyNode not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryNodes(ctx context.Context, req *NodesQuery) (*NodesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodes not implemented")
}

func RegisterMonitorServiceServer(s *grpc.Server, srv MonitorServiceServer) {
	s.RegisterService(&_MonitorService_serviceDesc, srv)
}

func _MonitorService_NotifyNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServiceServer).NotifyNode(&monitorServiceNotifyNodeServer{stream})
}

type MonitorService_NotifyNodeServer interface {
	Send(*NodeInfo) error
	Recv() (*NodeInfo, error)
	grpc.ServerStream
}

type monitorServiceNotifyNodeServer struct {
	grpc.ServerStream
}

func (x *monitorServiceNotifyNodeServer) Send(m *NodeInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorServiceNotifyNodeServer) Recv() (*NodeInfo, error) {
	m := new(NodeInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MonitorService_QueryNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).QueryNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.MonitorService/QueryNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).QueryNodes(ctx, req.(*NodesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNodes",
			Handler:    _MonitorService_QueryNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyNode",
			Handler:       _MonitorService_NotifyNode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "monitor.proto",
}
